/* eslint-disable react-hooks/exhaustive-deps */
// File: src/pages/PostDetail.jsx

import React, { useEffect, useState, useRef } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import './PostDetail.css';
import { useLikePost } from './api/use-like-post';
import { useAddComment } from './api/use-add-comment';
import { useFollowUser } from './api/use-follow-user';
import { useGetPosts } from './api/use-get-posts';

// --- Th√™m d√≤ng n√†y ƒë·ªÉ import Marked ---
import { marked } from 'marked';
// Ho·∫∑c n·∫øu b·∫°n mu·ªën th√™m t√≠nh nƒÉng l√†m s·∫°ch HTML ƒë·ªÉ an to√†n h∆°n (khuy·∫øn ngh·ªã):
// import DOMPurify from 'dompurify'; // npm install dompurify


const PostDetail = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const [post, setPost] = useState(null);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [likes, setLikes] = useState(0);
  const [isLiked, setIsLiked] = useState(false);
  const [hasAuthorBeenFollowed, setHasAuthorBeenFollowed] = useState(false);

  const { getPosts } = useGetPosts();
  const [allPosts, setAllPosts] = useState([]);

  useEffect(() => {
    const fetchPosts = async () => {
      const posts = await getPosts();
      setAllPosts(posts);
    };
    fetchPosts();
  }, []);

  const { likePost } = useLikePost();
  const { addComment } = useAddComment();
  const user = JSON.parse(localStorage.getItem('user')) || {};
  const { followUser } = useFollowUser();

  const commentsRef = useRef(null);

  const handleScrollToComments = () => {
    if (commentsRef.current) {
      commentsRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  useEffect(() => {
    const foundPost = allPosts.find(p => p._id === id);

    if (foundPost) {
      // --- Thay ƒë·ªïi l·ªõn nh·∫•t ·ªü ƒë√¢y: Chuy·ªÉn ƒë·ªïi Markdown th√†nh HTML ---
      const htmlContent = marked.parse(foundPost.content);
      // N·∫øu d√πng DOMPurify ƒë·ªÉ l√†m s·∫°ch HTML (khuy·∫øn ngh·ªã cho b·∫£o m·∫≠t XSS):
      // const sanitizedHtmlContent = DOMPurify.sanitize(htmlContent);

      setPost({ ...foundPost, content: htmlContent }); // Ho·∫∑c sanitizedHtmlContent
      document.title = `${foundPost.title} - ·ª®ng d·ª•ng Blog`;

      const postComments = foundPost.comments.map(comment => ({
        _id: comment._id,
        author: { displayName: comment.author.displayName, _id: comment.author._id },
        content: comment.content,
        createdAt: comment.createdAt.split('T')[0]
      }));
      setComments(postComments);

      setLikes(foundPost.likes.length || 0);
      setIsLiked(foundPost.likes.some(like => user && like._id === user._id));
      setHasAuthorBeenFollowed(foundPost.author.followers.some(follower => user && follower === user._id));
    } else {
      setPost(null);
      document.title = 'B√†i vi·∫øt kh√¥ng t√¨m th·∫•y - ·ª®ng d·ª•ng Blog';
    }
  }, [id, allPosts, user._id]);

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (newComment.trim()) {
      if (!user._id) {
        alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n.');
        return;
      }

      const commentAuthor = user.displayName;
      const commentAuthorId = user._id;

      const newCommentData = {
        _id: String(Date.now()),
        author: { displayName: commentAuthor, _id: commentAuthorId },
        content: newComment,
        createdAt: new Date().toISOString().split('T')[0]
      };

      setComments(prevComments => [...prevComments, newCommentData]);
      setNewComment('');

      try {
        await addComment(post._id, newCommentData);
      } catch (error) {
        console.error('Error adding comment:', error);
        setComments(prevComments => prevComments.filter(comment => comment._id !== newCommentData._id));
        alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i b√¨nh lu·∫≠n. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  const handleLikePost = async () => {
    if (isLiked || !user._id) {
      if (!user._id) alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√≠ch b√†i vi·∫øt.');
      return;
    }

    setLikes(prevLikes => prevLikes + 1);
    setIsLiked(true);
    try {
      await likePost(post._id);
    } catch (error) {
      console.error('Error liking post:', error);
      setLikes(prevLikes => prevLikes - 1);
      setIsLiked(false);
      alert('C√≥ l·ªói x·∫£y ra khi th√≠ch b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleFollowUser = async () => {
    if (!user._id || post.author._id === user._id) {
        if (!user._id) alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ theo d√µi t√°c gi·∫£.');
        return;
    }

    setHasAuthorBeenFollowed(prev => !prev);

    try {
      await followUser(post.author._id, user._id);
    } catch (error) {
      console.error('Error following/unfollowing user:', error);
      setHasAuthorBeenFollowed(prev => !prev);
      alert('C√≥ l·ªói x·∫£y ra khi theo d√µi t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  if (!post) {
    return <h2 className="post-detail-message">ƒêang t·∫£i b√†i vi·∫øt ho·∫∑c kh√¥ng t√¨m th·∫•y...</h2>;
  }

  return (
    <div className="post-detail-wrapper">
      {/* ========== Sidebar b√™n tr√°i ========= */}
      <div className="sidebar-actions">
        {/* N√∫t Like b√†i vi·∫øt (icon + s·ªë) */}
        <button
          className={`like-sidebar-btn ${isLiked ? 'liked' : ''}`}
          onClick={handleLikePost}
          disabled={!user._id}
        >
          {isLiked ? '‚ù§Ô∏è' : 'ü§ç'}
          <span className="like-count">{likes}</span>
        </button>

        {/* Icon B√¨nh lu·∫≠n, click s·∫Ω scroll xu·ªëng ph·∫ßn comment */}
        <button
          className="scroll-to-comments-btn"
          onClick={handleScrollToComments}
        >
          üí¨
        </button>
      </div>

      {/* ========== Ph·∫ßn n·ªôi dung ch√≠nh ========= */}
      <div className="post-detail-container">
        {/* Back button */}
        <button onClick={() => navigate('/home')} className="back-btn">‚üµ Quay l·∫°i</button>

        {/* Ti√™u ƒë·ªÅ b√†i vi·∫øt */}
        <div className="post-detail-header">
          <h1>{post.title}</h1>
        </div>

        {/* Th√¥ng tin t√°c gi·∫£ v√† n√∫t Theo d√µi */}
        <div className="author-section">
          <div className="author-info">
            {post.author?._id ? (
              <Link to={`/user/${post.author._id}`} className="author-link">
                <strong>{post.author.displayName}</strong>
              </Link>
            ) : (
              <strong>{post.author.displayName || 'T√°c gi·∫£ ·∫©n danh'}</strong>
            )}
          </div>
          {user._id && post.author._id !== user._id && (
            <button className="follow-btn" onClick={handleFollowUser}>
              {hasAuthorBeenFollowed ? 'ƒê√£ theo d√µi' : '+ Theo d√µi'}
            </button>
          )}
        </div>

        {/* ·∫¢nh ch√≠nh c·ªßa b√†i vi·∫øt (n·∫øu c√≥) */}
        {post.bookImage && (
          <img
            src={post.bookImage}
            alt={post.title}
            className="post-main-image"
          />
        )}

        {/* N·ªôi dung b√†i vi·∫øt */}
        <div
          className="post-content"
          dangerouslySetInnerHTML={{ __html: post.content }}
        ></div>

        {/* ========== Ph·∫ßn b√¨nh lu·∫≠n ========= */}
        <div className="comments-section" ref={commentsRef}>
          <h3>B√¨nh lu·∫≠n</h3>

          <form onSubmit={handleCommentSubmit} className="comment-form">
            <textarea
              placeholder={user._id ? "Vi·∫øt b√¨nh lu·∫≠n c·ªßa b·∫°n..." : "ƒêƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n..."}
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              rows="4"
              disabled={!user._id}
            ></textarea>
            <button type="submit" disabled={!user._id}>G·ª≠i b√¨nh lu·∫≠n</button>
          </form>

          <div className="comments-list">
            {comments.length === 0 ? (
              <p className="no-comments">Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n!</p>
            ) : (
              comments.map(comment => (
                <div key={comment._id} className="comment-item">
                  <div className="comment-main-content">
                    {comment.author?._id ? (
                      <Link to={`/user/${comment.author._id}`} className="comment-author-link" style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                        <p className="comment-author"><strong>{comment.author.displayName}</strong></p>
                        <p style={{ color: '#666', fontSize: '12px' }}> - {comment.createdAt}</p>
                      </Link>
                    ) : (
                      <p className="comment-author"><strong>{comment.author.displayName || 'Ng∆∞·ªùi d√πng ·∫©n danh'}</strong></p>
                    )}
                    <p className="comment-text">{comment.content}</p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
        {/* ========== K·∫øt th√∫c ph·∫ßn b√¨nh lu·∫≠n ========== */}
      </div>
      {/* ========== K·∫øt th√∫c n·ªôi dung ch√≠nh ========== */}
    </div>
  );
};

export default PostDetail;